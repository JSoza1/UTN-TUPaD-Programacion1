# Consigna 1: Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario 

# Mensaje inicial
print("-------------- Ejercicio 1 --------------")
print ("======== Factorial de un n√∫mero ========")

# Definici√≥n de funci√≥n   
def factorial(n):
    return 1 if n == 0 else n * factorial(n - 1)

# Solicitud, conversion y asignacion de valor a variable
n = int(input("Ingrese un numero para calcular el factorial: "))

# Inicio bucle - llamado a funci√≥n y mensaje
for numero_actual in range(1, n + 1):
    print(f"El factorial de {numero_actual} es: {factorial(numero_actual)}")

# Consigna 2: Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

# Mensaje inicial
print("-------------- Ejercicio 2 --------------")
print("========== Serie de Fibonacci ==========")

# Definici√≥n de funci√≥n
def fibonacci(posicion):
    return posicion if posicion <= 1 else fibonacci(posicion - 1) + fibonacci(posicion - 2)

# Solicitud, conversion y asignacion de valor a variable
limite_superior = int(input("Ingrese una posici√≥n l√≠mite para mostrar la serie de Fibonacci: "))

# Inicio bucle - llamado a funci√≥n y mensaje
for posicion_actual in range(limite_superior + 1):
    print(f"Fibonacci en posici√≥n {posicion_actual} es: {fibonacci(posicion_actual)}")

# Consigna 3: Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general. 

# Mensaje inicial
print("-------------- Ejercicio 3 --------------")
print ("== Potencia de un n√∫mero base elevado a un exponente ==")

# Definici√≥n de funci√≥n
def potencia(base, exponente):
    return 1 if exponente == 0 else base * potencia(base, exponente - 1)

# Solicitud, conversi√≥n y asignaci√≥n de valor a variables
valor_base = int(input("Ingrese el n√∫mero base: "))
valor_exponente = int(input("Ingrese el exponente: "))

# Llamado a funci√≥n y mensaje
resultado = potencia(valor_base, valor_exponente)
print(f"{valor_base} elevado a la {valor_exponente} es: {resultado}")

# Consigna 4: Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto. Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. 

# Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento: 
# 1. Dividir el n√∫mero por 2. 
# 2. Guardar el resto (0 o 1). 
# 3. Repetir el proceso con el cociente hasta que llegue a 0. 
# 4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

# Convertir el n√∫mero 10 a binario: 
# 10 √∑ 2 = 5     resto: 0   
#  5 √∑ 2 = 2     resto: 1   
#  2 √∑ 2 = 1     resto: 0   
#  1 √∑ 2 = 0     resto: 1   

# Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010".

# Mensaje inicial
print("-------------- Ejercicio 4 --------------")
print("======== Base decimal a Binario ========")

# Definici√≥n de funci√≥n
def conversion_binario(numero_decimal):
    # Paso 3: Repetir el proceso con el cociente hasta que llegue a 0
    if numero_decimal == 0:
        return ""
    else:
        # Paso 1: Dividir el n√∫mero por 2
        cociente = numero_decimal // 2
        # Paso 2: Guardar el resto (0 o 1)
        resto = numero_decimal % 2
        # Paso 4: Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario
        binario_parcial = conversion_binario(cociente)
        return binario_parcial + str(resto)

# Solicitud, conversi√≥n y asignaci√≥n de valor a variable
numero_decimal = int(input("Ingrese un n√∫mero entero positivo: "))

# Inicio condicional
if numero_decimal == 0:
    print("El n√∫mero binario es: 0")
else:
    # Llamado a funci√≥n y mensaje
    resultado_binario = conversion_binario(numero_decimal)
    print(f"El n√∫mero binario es: {resultado_binario}")

# Consigna 5: Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es. 

# Requisitos: 
# La soluci√≥n debe ser recursiva. 
# No se debe usar [::-1] ni la funci√≥n reversed(). 

# Mensaje inicial
print("-------------- Ejercicio 5 --------------")
print ("============== Pal√≠ndromo ==============")

# Definici√≥n de funci√≥n
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    
    # Si la primera y la √∫ltima letra son distintas, no es pal√≠ndromo
    if palabra[0] != palabra[len(palabra) - 1]:
        return False

    # Llamado a la funci√≥n sin la primera y √∫ltima letra
    return es_palindromo(palabra[1:len(palabra) - 1])

# Solicitud y asignaci√≥n de valor a variable
palabra = input("Ingres√° una palabra (sin espacios ni tildes): ").lower()

if es_palindromo(palabra):
    print(f"'{palabra}' es un pal√≠ndromo")
else:
    print(f"'{palabra}' no es un pal√≠ndromo")

# Consigna 6: Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 

# Restricciones: 
# No se puede convertir el n√∫mero a string. 
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 

# Ejemplos: 
# suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
# suma_digitos(9)      ‚Üí 9 
# suma_digitos(305)    ‚Üí 8   (3 + 0 + 5) 

# Mensaje inicial
print("-------------- Ejercicio 6 --------------")
print ("=========== Suma de digitos ===========")

# Definici√≥n de funci√≥n
def suma_digitos(n):
    if n < 10:
        return n
    # Separaci√≥n del √∫ltimo d√≠gito y sumar el resto
    else:
        return (n % 10) + suma_digitos(n // 10)

# Solicitud, conversi√≥n y asignaci√≥n de valor a variable
numero_ingresado = int(input("Ingres√° un n√∫mero entero positivo: "))

# Llamado a funci√≥n y mensaje
print(f"La suma de los d√≠gitos de {numero_ingresado} es {suma_digitos(numero_ingresado)}")

# Consigna 7: Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque. 

# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide. 
 
# Ejemplos: 
# contar_bloques(1)   ‚Üí 1         (1) 
# contar_bloques(2)   ‚Üí 3         (2 + 1) 
# contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1) 

# Mensaje inicial
print("-------------- Ejercicio 7 --------------")
print ("========= Contador de bloques =========")

# Definici√≥n de funci√≥n
def contar_bloques(n):
    if n == 1:
        return 1
    # Se retorna la suma de n (el nivel actual) m√°s el resultado de contar_bloques(n - 1)
    else:
        return n + contar_bloques(n - 1)

# Solicitud, conversi√≥n y asignaci√≥n de valor a variable
numero_bloques_nivel_bajo = int(input("Ingres√° el n√∫mero de bloques del nivel m√°s bajo: "))

# Llamado a funci√≥n y mensaje
print(f"Total de bloques necesarios: {contar_bloques(numero_bloques_nivel_bajo)}")

# Consigna 8: Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero. 

# Ejemplos: 
# contar_digito(12233421, 2)   ‚Üí 3   
# contar_digito(5555, 5)       ‚Üí 4   
# contar_digito(123456, 7)     ‚Üí 0

# Mensaje inicial
print("-------------- Ejercicio 8 --------------")
print ("== Veces que aparece un digito dentro de un n√∫mero ==")

# Definici√≥n de funci√≥n
def contar_digito(numero, digito):
    if numero < 10:
        return 1 if numero == digito else 0
    else:
        # √öltimo d√≠gito
        ultimo = numero % 10  
        # Resto del n√∫mero
        resto = numero // 10  
        # Se compara el √∫ltimo d√≠gito del n√∫mero con el d√≠gito buscado.
        # Si coincide el digito, suma 1 al contador y contin√∫a con el resto del n√∫mero.
        if ultimo == digito:  
            return 1 + contar_digito(resto, digito)
        # Si no coincide el digito, contin√∫a con el resto sin sumar.
        else:
            return contar_digito(resto, digito)

# Solicitud, conversi√≥n y asignaci√≥n de valor a variables
numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese d√≠gito a contar: "))

# Llamado a funci√≥n y mensaje
print(f"El d√≠gito {digito} aparece {contar_digito(numero, digito)} veces en el n√∫mero {numero}.")